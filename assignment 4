import tkinter as tk
from tkinter import messagebox

class Task:
    def __init__(self, task_id, description, priority):
        self.task_id = task_id
        self.description = description
        self.priority = priority
        self.completed = False

    def __str__(self):
        return f"Task ID: {self.task_id}, Description: {self.description}, Priority: {self.priority}, Completed: {self.completed}"


class PriorityQueue:
    def __init__(self):
        self.tasks = []

    def enqueue(self, task):
        self.tasks.append(task)
        self.tasks.sort(key=self.get_priority, reverse=True)

    def get_priority(self, task):
        return task.priority

    def dequeue(self):
        if self.is_empty():
            return None
        return self.tasks.pop(0)

    def is_empty(self):
        return len(self.tasks) == 0

   


class Stack:
    def __init__(self):
        self.tasks = []

    def push(self, task):
        self.tasks.append(task)

    def pop(self):
        if self.is_empty():
            return None
        return self.tasks.pop()

    def is_empty(self):
        return len(self.tasks) == 0

    


class TaskManagerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Task Manager")

        self.task_queue = PriorityQueue()
        self.completed_tasks = Stack()

        self.description_label = tk.Label(root, text="Description:")
        self.description_label.grid(row=0, column=0, padx=5, pady=5)

        self.priority_label = tk.Label(root, text="Priority:")
        self.priority_label.grid(row=0, column=1, padx=5, pady=5)

        self.description_entry = tk.Entry(root, width=30)
        self.description_entry.grid(row=1, column=0, padx=5, pady=5)

        self.priority_entry = tk.Entry(root, width=10)
        self.priority_entry.grid(row=1, column=1, padx=5, pady=5)

        self.add_button = tk.Button(root, text="Add Task", command=self.add_task)
        self.add_button.grid(row=1, column=2, padx=5, pady=5)

        self.complete_button = tk.Button(root, text="Mark Completed", command=self.mark_completed)
        self.complete_button.grid(row=2, column=0, columnspan=2, padx=5, pady=5)

        self.task_listbox = tk.Listbox(root, width=50, height=15)
        self.task_listbox.grid(row=3, column=0, columnspan=3, padx=5, pady=5)

       
        self.populate_listbox()

    def add_task(self):
        description = self.description_entry.get()
        priority = int(self.priority_entry.get())
        if description and priority:
            task_id = len(self.task_queue.tasks) + len(self.completed_tasks.tasks) + 1  
            task = Task(task_id, description, priority)
            self.task_queue.enqueue(task)
            self.populate_listbox()
            self.description_entry.delete(0, tk.END)
            self.priority_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Warning", "Please enter description and priority.")

    def mark_completed(self):
        task = self.task_queue.dequeue()
        if task:
            task.completed = True
            self.completed_tasks.push(task)
            self.populate_listbox()
        else:
            messagebox.showinfo("Task Manager", "No tasks in the queue.")

    def populate_listbox(self):
        self.task_listbox.delete(0, tk.END)
        #display task queue
        self.task_listbox.insert(tk.END, "Tasks in Queue:")
        for task in self.task_queue.tasks:
            self.task_listbox.insert(tk.END, str(task))
        #display stack (completed tasks)
        self.task_listbox.insert(tk.END, "")
        self.task_listbox.insert(tk.END, "Completed Tasks:")
        completed_tasks_list = []
        while not self.completed_tasks.is_empty():
            completed_task = self.completed_tasks.pop()
            completed_tasks_list.append(completed_task)
            self.task_listbox.insert(tk.END, str(completed_task))
        
        for completed_task in completed_tasks_list[::-1]:
            self.completed_tasks.push(completed_task)

def main():
    root = tk.Tk()
    app = TaskManagerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
